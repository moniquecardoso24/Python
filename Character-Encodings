{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7b8f7503",
   "metadata": {
    "papermill": {
     "duration": 0.006154,
     "end_time": "2022-12-06T03:11:13.194588",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.188434",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Data Cleaning](https://www.kaggle.com/learn/data-cleaning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/alexisbcook/character-encodings).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be8b6ae0",
   "metadata": {
    "papermill": {
     "duration": 0.004517,
     "end_time": "2022-12-06T03:11:13.204242",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.199725",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In this exercise, you'll apply what you learned in the **Character encodings** tutorial.\n",
    "\n",
    "# Setup\n",
    "\n",
    "The questions below will give you feedback on your work. Run the following cell to set up the feedback system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "152928cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.216380Z",
     "iopub.status.busy": "2022-12-06T03:11:13.215877Z",
     "iopub.status.idle": "2022-12-06T03:11:13.329279Z",
     "shell.execute_reply": "2022-12-06T03:11:13.325601Z"
    },
    "papermill": {
     "duration": 0.125044,
     "end_time": "2022-12-06T03:11:13.334269",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.209225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setup Complete\n"
     ]
    }
   ],
   "source": [
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.data_cleaning.ex4 import *\n",
    "print(\"Setup Complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfdd96ba",
   "metadata": {
    "papermill": {
     "duration": 0.004935,
     "end_time": "2022-12-06T03:11:13.345416",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.340481",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Get our environment set up\n",
    "\n",
    "The first thing we'll need to do is load in the libraries we'll be using."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e7065d9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.357227Z",
     "iopub.status.busy": "2022-12-06T03:11:13.356797Z",
     "iopub.status.idle": "2022-12-06T03:11:13.363076Z",
     "shell.execute_reply": "2022-12-06T03:11:13.361569Z"
    },
    "papermill": {
     "duration": 0.015141,
     "end_time": "2022-12-06T03:11:13.365590",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.350449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# modules we'll use\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# helpful character encoding module\n",
    "import chardet\n",
    "\n",
    "# set seed for reproducibility\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "568b46e1",
   "metadata": {
    "papermill": {
     "duration": 0.005242,
     "end_time": "2022-12-06T03:11:13.375839",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.370597",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) What are encodings?\n",
    "\n",
    "You're working with a dataset composed of bytes.  Run the code cell below to print a sample entry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5eddb84f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.387890Z",
     "iopub.status.busy": "2022-12-06T03:11:13.387433Z",
     "iopub.status.idle": "2022-12-06T03:11:13.393653Z",
     "shell.execute_reply": "2022-12-06T03:11:13.392285Z"
    },
    "papermill": {
     "duration": 0.015675,
     "end_time": "2022-12-06T03:11:13.396471",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.380796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'\\xa7A\\xa6n'\n",
      "data type: <class 'bytes'>\n"
     ]
    }
   ],
   "source": [
    "sample_entry = b'\\xa7A\\xa6n'\n",
    "print(sample_entry)\n",
    "print('data type:', type(sample_entry))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "252160ff",
   "metadata": {
    "papermill": {
     "duration": 0.004932,
     "end_time": "2022-12-06T03:11:13.406561",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.401629",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "You notice that it doesn't use the standard UTF-8 encoding. \n",
    "\n",
    "Use the next code cell to create a variable `new_entry` that changes the encoding from `\"big5-tw\"` to `\"utf-8\"`.  `new_entry` should have the bytes datatype."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "37041c52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.418574Z",
     "iopub.status.busy": "2022-12-06T03:11:13.418123Z",
     "iopub.status.idle": "2022-12-06T03:11:13.430838Z",
     "shell.execute_reply": "2022-12-06T03:11:13.429833Z"
    },
    "papermill": {
     "duration": 0.021526,
     "end_time": "2022-12-06T03:11:13.433186",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.411660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_EncodingsIntro\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "before= sample_entry.decode(\"big5-tw\")\n",
    "new_entry = before.encode()\n",
    "\n",
    "#Try using .decode() to get the string, \n",
    "# then .encode() to get the bytes representation, encoded in UTF-8.\n",
    "\n",
    "# Check your answer\n",
    "q1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "67bc687a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.445973Z",
     "iopub.status.busy": "2022-12-06T03:11:13.445532Z",
     "iopub.status.idle": "2022-12-06T03:11:13.450533Z",
     "shell.execute_reply": "2022-12-06T03:11:13.449192Z"
    },
    "papermill": {
     "duration": 0.015131,
     "end_time": "2022-12-06T03:11:13.453699",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.438568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q1.hint()\n",
    "#q1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bcb9581",
   "metadata": {
    "papermill": {
     "duration": 0.005427,
     "end_time": "2022-12-06T03:11:13.465197",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.459770",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Reading in files with encoding problems\n",
    "\n",
    "Use the code cell below to read in this file at path `\"../input/fatal-police-shootings-in-the-us/PoliceKillingsUS.csv\"`.  \n",
    "\n",
    "Figure out what the correct encoding should be and read in the file to a DataFrame `police_killings`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5d1ac704",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.477923Z",
     "iopub.status.busy": "2022-12-06T03:11:13.477442Z",
     "iopub.status.idle": "2022-12-06T03:11:13.505140Z",
     "shell.execute_reply": "2022-12-06T03:11:13.503938Z"
    },
    "papermill": {
     "duration": 0.037253,
     "end_time": "2022-12-06T03:11:13.507786",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.470533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_ReadIn\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Load in the DataFrame correctly.\n",
    "\n",
    "police_killings = pd.read_csv(\"../input/fatal-police-shootings-in-the-us/PoliceKillingsUS.csv\", encoding='Windows-1252')\n",
    "\n",
    "\n",
    "# Check your answer\n",
    "q2.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "219eda64",
   "metadata": {
    "papermill": {
     "duration": 0.005173,
     "end_time": "2022-12-06T03:11:13.518458",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.513285",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Feel free to use any additional code cells for supplemental work.  To get credit for finishing this question, you'll need to run `q2.check()` and get a result of **Correct**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "19604a2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.531694Z",
     "iopub.status.busy": "2022-12-06T03:11:13.531230Z",
     "iopub.status.idle": "2022-12-06T03:11:13.536926Z",
     "shell.execute_reply": "2022-12-06T03:11:13.535556Z"
    },
    "papermill": {
     "duration": 0.015841,
     "end_time": "2022-12-06T03:11:13.539778",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.523937",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# (Optional) Use this code cell for any additional work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2d1eda81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.553676Z",
     "iopub.status.busy": "2022-12-06T03:11:13.553232Z",
     "iopub.status.idle": "2022-12-06T03:11:13.558253Z",
     "shell.execute_reply": "2022-12-06T03:11:13.556970Z"
    },
    "papermill": {
     "duration": 0.014354,
     "end_time": "2022-12-06T03:11:13.560799",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.546445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q2.hint()\n",
    "#q2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a3da319",
   "metadata": {
    "papermill": {
     "duration": 0.005319,
     "end_time": "2022-12-06T03:11:13.571598",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.566279",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3) Saving your files with UTF-8 encoding\n",
    "\n",
    "Save a version of the police killings dataset to CSV with UTF-8 encoding.  Your answer will be marked correct after saving this file.  \n",
    "\n",
    "Note: When using the `to_csv()` method, supply only the name of the file (e.g., `\"my_file.csv\"`).  This saves the file at the filepath `\"/kaggle/working/my_file.csv\"`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "08629380",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.584428Z",
     "iopub.status.busy": "2022-12-06T03:11:13.584034Z",
     "iopub.status.idle": "2022-12-06T03:11:13.621095Z",
     "shell.execute_reply": "2022-12-06T03:11:13.620242Z"
    },
    "papermill": {
     "duration": 0.046204,
     "end_time": "2022-12-06T03:11:13.623486",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.577282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_SaveCSV\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Save the police killings dataset to CSV\n",
    "police_killings.to_csv(\"my_file.csv\")\n",
    "\n",
    "# Check your answer\n",
    "q3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c68b1c05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-06T03:11:13.637743Z",
     "iopub.status.busy": "2022-12-06T03:11:13.636427Z",
     "iopub.status.idle": "2022-12-06T03:11:13.641100Z",
     "shell.execute_reply": "2022-12-06T03:11:13.640260Z"
    },
    "papermill": {
     "duration": 0.013973,
     "end_time": "2022-12-06T03:11:13.643377",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.629404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q3.hint()\n",
    "#q3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "041a2f4d",
   "metadata": {
    "papermill": {
     "duration": 0.005412,
     "end_time": "2022-12-06T03:11:13.654551",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.649139",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# (Optional) More practice\n",
    "\n",
    "Check out [this dataset of files in different character encodings](https://www.kaggle.com/rtatman/character-encoding-examples). Can you read in all the files with their original encodings and them save them out as UTF-8 files?\n",
    "\n",
    "If you have a file that's in UTF-8 but has just a couple of weird-looking characters in it, you can try out the [ftfy module](https://ftfy.readthedocs.io/en/latest/#) and see if it helps. \n",
    "\n",
    "# Keep going\n",
    "\n",
    "In the final lesson, learn how to [**clean up inconsistent text entries**](https://www.kaggle.com/alexisbcook/inconsistent-data-entry) in your dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7883035",
   "metadata": {
    "papermill": {
     "duration": 0.005391,
     "end_time": "2022-12-06T03:11:13.665578",
     "exception": false,
     "start_time": "2022-12-06T03:11:13.660187",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/data-cleaning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.291594,
   "end_time": "2022-12-06T03:11:14.393379",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-12-06T03:11:03.101785",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
